
一、变量
	1.赋值不允许等号左右有空格。
	2.单引号双引号都可以，但是当变量值引用其它变量时必须使用双引号,name="$name1"。所以推荐使用双引号。
	3.取值使用$.严谨的写法加上{}。例如：${name}
	4.从内存中释放变量：unset。该命令对函数同样适用。
	5.有一些只读变量只有在脚本运行时才能够确定：
		1）$0:脚本本身; $1第一个参数;  $2:第二个参数  ${10}:第十个参数...	
		2)$#:参数个数总和; $@或者$*:表示脚本的所有参数。
		3)参数是在执行脚本时加上的。例如执行脚本：bash test.sh param1 param2。后面两个为参数
	6.$?:永远是上一个命令的返回值
	7.只读变量：readonly a=100; 也就是常量，声明时必须赋值，之后无法修改。
	8.变量的作用域：linux系统中不同进程id的shell是一个命名空间。所以一个shell脚本中即使是函数里声明的变量这个shell全局中都可以使用。如果声明局部变量，则使用关键字local。
二、数组
	1.数组定义
		使用declare命令定义数组:declare -a Array。定义名为Array的数组。
		declare -a name=("aa" "bb");在创建name数组的同时赋值两个元素  注意两个元素中间是空格，不是逗号
		不使用declare:name=("aa" "bb");
		给特定的元素赋值:score=([2]=3,[4]=5);
	2.数组的操作
		1）取值:${数组名[索引]} 例如:${name[1]}
		2）取出数组所有元素:${Array[@]}或者${Array[*]}。两者的区别是前者是空格隔开的所有元素，第二个是所有元素组成的一整个字符串
	3.数组的长度
		1）${#Array[@]}或者${#Array[*]}。如果某个元素是字符串则可以${#Array[1]}来获得该字符串的长度
	4.数组的截取
		截取的对象可以是整个数组或者是数组的某个元素。
		1）${Array[@]:1:2} : 截取数组的第二个到第三个元素
		2）${Array[1]:0:5}: 截取数组第二个元素的从第0个字符开始连续的5个字符
	5.连接数组
		将若干个数组进行拼接。Array=(${Array1[@]} ${Array2[@]});  注意中间仍然是空格
	6.替换元素
		array=(${array[@]\a\b}) : 将array中的a元素替换成b
	7.取消数组或者数组中的元素
		使用unset命令  unset array：取消数组。  unset array[1]：取消第二个元素
三、转义和引用
	1.转义就是将一些有特殊意义的字符作为单纯的字面意义的字符出现。linux的转义符号是\。
	2.防止特殊字符被解析成其它的意思
		1）全引用：''单引号，里面的特殊字符都会按照原样输出
		2）部分引用：""双引号
	3.命令替换：将命令的标准输出作为赋值给某个变量。
		1）``反引号：date_01=`date`;
		2）$():date_02=$(date);
			以上都是将date变量的输出值保存在变量中。
		3）取值的时候，如果输出包括多行，那么"$v"方式将会保留换行符。其它方式将在一行展示。
		4）*$()支持嵌套，而反引号则不行。但$()只在bash shell中有效。
四、运算符
	1.let "value=6>>2"; echo $value;
	2.$[] : $[1+1]; $[2*2]
	3.expr: 要求操作数和操作符之间要用空格隔开，特殊的操作符需要转义。
		1）expr 2 \* 2; expr 1 + 1;
	4.declare:declare显示声明变量可以指定变量类型.declare -i J，声明J为整数。
	
